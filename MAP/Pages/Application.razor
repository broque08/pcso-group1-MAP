@layout UserLayout
@page "/Application"
@inject NavigationManager NavigationManager

<PageTitle>Application</PageTitle>

<style>
    body {
        background-color: #37474F;
    }
</style>

<center>
<MudContainer Class="d-flex align-center justify-center mud-width-full"  style="height:70vh;">
<MudCard Outlined="true" Square="false" Style="width: 450px; height: 420px" Class="border-double border-4 mud-border-warning pa-4">
    
   <MudCardContent>
         <br />
         <MudPaper Class="pa-md-2 mx-lg-auto mud-theme-warning" Style="width: 350px; height: 75px" >
            <MudText Typo="Typo.h5">Medical Access Program</MudText>
            <MudText Typo="Typo.h5"><b>(Application)</b></MudText><br />
            <MudAvatar Rounded="true" Color="Color.Warning"  Variant="Variant.Outlined">
            <MudIcon Icon="@Icons.Material.Filled.Article" />
            </MudAvatar>
         </MudPaper>
         <br/><br><br />
   <MudTextField @bind-Value="ApplicationNumber" Label="ApplicationNumber" Variant="Variant.Outlined"></MudTextField>
  <MudAutocomplete T="string" Label="Assistance" @bind-Value="value1" SearchFunc="@Search1" Variant="Variant.Outlined" />
    
       

      <br /><br />
      <MudButton Variant="Variant.Filled" class="py-2 px-6 mx-2 rounded-xl" StartIcon="@Icons.Material.Filled.CheckCircle" Style="@($"color:{Colors.Blue.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Large">Submit</MudButton>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <MudButton Variant="Variant.Filled" class="py-2 px-6 mx-2 rounded-xl"  StartIcon="@Icons.Material.Filled.Cancel" Style="@($"color:{Colors.Red.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Large" @onclick="Cancel">Cancel</MudButton>
      
    </MudCardContent>
             
</MudCard>   
</MudContainer>
</center>


@code {
    public string ApplicationNumber { get; set; }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private string value1;
    private string[] states =
    {
        "Sample1", "Sample2", "Sample3", "Sample4",
        
    };
    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
}
